/*Ejercicio 2 a
[3,/,4,-,/,3,/,8]
*/

/* Ejercicio 2 b*/


 final(s9).

/*https://stackoverflow.com/questions/42965186/how-to-tell-prolog-that-n-is-a-natural-number-if-n-1-is-a-natural-number*
Definicion de numero natural se saco del link anterior
*/
 nat(N) :- between(0, infinite, N).

 natural(0).
 natural(N) :-N>0, M is N - 1, natural(M).


 trans_abaco(s1, N, s2) :- natural(N).

 trans_abaco(s2, /, s3) .

 trans_abaco(s3, N, s4) :- natural(N).

 trans_abaco(s4, +, s5) .
 trans_abaco(s4, -, s5) .

 trans_abaco(s5, /, s6) .

 trans_abaco(s6, N, s7) :- natural(N).

 trans_abaco(s7, /, s8) .

 trans_abaco(s8, N, s9) :- natural(N).

/* Ejercicio 2 c*/

acepta(Estado, []) :- final(Estado).

acepta(Estado, [S|Resto]) :-  trans_abaco(Estado,S,Estado1),
                              acepta(Estado1, Resto).
/*-------------------------------------------------------------*/

/*Ejercicio 3a*/


/*inst Ejercicio 3a
Ejemplo del llamado turing([1,1,1,+,1,1,=],N)*/


inst(q0,1,q0,1,der).
inst(q0,+,q1,1,simSum).
inst(q1,1,q1,1,sum).
inst(q1,=,qf,=,detener).

/*inst del Ejercicio 3b
Ejemplo del llamado turing([1,1,1,-,1,=],N)*/
inst(q0,-,q2,1,simRest).
inst(q2,1,q2,1,rest).
inst(q2,=,qf,=,detener).


/*inst del Ejercicio 3c
Ejemplo del llamado turingMul([1,1,1,*,1,1],N)*/

inst_mul(q0,*,q0,*,der).
 inst_mul(q0,1,q1,*,der).

 inst_mul(q1,1,q1,1,der).
 inst_mul(q1,*,q2,*,der).

 inst_mul(q2,1,q3,*,der).
 inst_mul(q2,*,q7,*,der).

 inst_mul(q3,1,q3,1,der).
 inst_mul(q3,*,q4,*,der).
 inst_mul(q3,v,q4,*,der).

 inst_mul(q4,1,q4,1,der).
 inst_mul(q4,*,q5,1,izq).
 inst_mul(q4,v,q5,1,izq).

 inst_mul(q5,*,q6,*,izq).
 inst_mul(q5,1,q5,1,izq).

 inst_mul(q6,1,q10,1,izq).
 inst_mul(q6,*,q7,*,izq).

 inst_mul(q7,*,q7,*,izq).
 inst_mul(q7,v,qf,*,detener).
 inst_mul(q7,1,q8,1,der).

 inst_mul(q8,*,q9,*,der).

 inst_mul(q9,*,q9,1,der).
 inst_mul(q9,1,q11,1,izq).

 inst_mul(q10,1,q10,1,izq).
 inst_mul(q10,*,q2,*,der).

 inst_mul(q11,*,qf,*,detener).
 inst_mul(q11,1,q14,*,izq).

 inst_mul(q14,1,q14,1,izq).
 inst_mul(q14,*,q12,*,izq).

 inst_mul(q12,*,qf,*,detener).
 inst_mul(q12,1,q13,1,izq).

 inst_mul(q13,*,q0,*,der).
 inst_mul(q13,1,q13,1,izq).

% Simulador

turing(CintaActual, CintaFinal) :-
    ejecute(q0, [], CintaActual, Ls, Rs),
    append(Rs,Ls , CintaFinal).

ejecute(qf, Ls, Rs, Ls, Rs) :- !.
ejecute(Q0, Ls0, Rs0, Ls, Rs) :-
    simbolo(Rs0, SimboloLeido, RsRest),
    once(inst(Q0, SimboloLeido, Q1, NuevoSimb, Action)),
    accion(Action, Ls0, [NuevoSimb|RsRest], Ls1, Rs1),
    ejecute(Q1, Ls1, Rs1, Ls, Rs).


/*Ejercicio 3c turing*/

turingMul(CintaActual, CintaFinal) :-
    ejecuteMul(q0, [], CintaActual, Ls, Rs),
    reverse(Ls, Ls1),
    append(Ls1, Rs, Temp),
    limpiar(Temp,CintaFinal).

ejecuteMul(qf, Ls, Rs, Ls, Rs) :- !.
ejecuteMul(Q0, Ls0, Rs0, Ls, Rs) :-
    simbolo(Rs0, SimboloLeido, RsRest),
    once(inst_mul(Q0, SimboloLeido, Q1, NuevoSimb, Action)),
    accion(Action, Ls0, [NuevoSimb|RsRest], Ls1, Rs1),
    ejecuteMul(Q1, Ls1, Rs1, Ls, Rs).


simbolo([], v, []).
simbolo([Simb|Rs], Simb, Rs).

accion(izq, Ls0, Rs0, Ls, Rs) :- izq(Ls0, Rs0, Ls, Rs).
accion(detener, Ls, Rs, Ls, Rs).
accion(der, Ls0, [Sym|Rs], [Sym|Ls0], Rs).


/*accion Ejercicio 3a*/
accion(sum, Ls0, [Sym|Rs], [Sym|Ls0], Rs).
accion(simSum,Ls0, [_|Rs], Ls0, Rs).

/*accion Ejercicio 3b*/
accion(rest, [_|Ls0], [_|Rs], Ls0, Rs).
accion(simRest,Ls0, [_|Rs], Ls0, Rs).

/*accion Ejercicio 3b*/

izq([], Rs0, [], [v|Rs0]).
izq([L|Ls], Rs, Ls, [L|Rs]).


limpiar([C|Lista],NLista):-C =='*',
    append(Lista, [], ListaTemp),
    limpiar(ListaTemp,NLista).
limpiar(Lista,Lista).
